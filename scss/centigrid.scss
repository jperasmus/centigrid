$base-font-size: 16;

@function em($target, $context: $base-font-size) {
	@return ($target / $context) * 1em;
}

@function perc($value) {
	@return ($value) * 1%;
}

$row-width: em(1000) !default;
$gutter: em(30) !default;

// The following two functions are needed for the grid to work in foundation 4
@function lower-bound($range){
	@if length($range) <= 0 {
		@return 0;
	}
	@return nth($range,1);
}

@function upper-bound($range) {
	@if length($range) < 2 {
		@return 999999999999;
	}
	@return nth($range, 2);
}

// Variables
$include-xs-grid: false !default;
$include-s-grid: true !default;
$include-m-grid: true !default;
$include-l-grid: true !default;
$include-xl-grid: false !default;
$include-xxl-grid: false !default;

// Media Query Ranges
$xsmall-range: (em(0), em(320)) !default;
$small-range: (em(0), em(640)) !default;
$medium-range: (em(641), em(1024)) !default;
$large-range: (em(1025), em(1440)) !default;
$xlarge-range: (em(1441), em(1920)) !default;
$xxlarge-range: (em(1921), em(9999999)) !default;

$screen: "only screen" !default;

$landscape: "#{$screen} and (orientation: landscape)" !default;
$portrait: "#{$screen} and (orientation: portrait)" !default;

$xsmall-up: $screen !default;
$xsmall-only: "#{$screen} and (max-width: #{upper-bound($xsmall-range)})" !default;

$small-up: $screen !default;
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})" !default;
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})" !default;

$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})" !default;

$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})" !default;

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})" !default;
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})" !default;


// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $flat - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.
@mixin grid-column(
	$columns:false,
	$last-column:false,
	$center:false,
	$offset:false,
	$push:false,
	$pull:false,
	$flat:false,
	$float:true,
	$position:false) {

	// If positioned for default .column, include relative position
	// push and pull require position set
	@if $position or $push or $pull {
		position: relative;
	}

	// If flattened, get rid of gutter padding
	@if $flat {
		padding-left: 0;
		padding-right: 0;
	}

	// Gutter padding whenever a column isn't set to flat
	// (use $flat:null to do nothing)
	@else if $flat == false {
		padding-left: $gutter / 2;
		padding-right: $gutter / 2;
	}

	// If a column number is given, calculate width
	@if $columns {
		width: perc($columns);

		// If last column, float to the right
		@if $last-column { 
			float: right;
		}
	}

	// Source Ordering, adds left/right depending on which you use.
	@if $push { 
		left: perc($push);
		right: auto; 
	}
	@if $pull { 
		right: perc($pull);
		left: auto;
	}

	@if $float {
		@if $float == left or $float == true { 
			float: left;
		}
		@else if $float == right { 
			float: right;
		}
		@else { 
			float: none;
		}
	}

	// If centered, get rid of float and add appropriate margins
	@if $center {
		margin-left: auto;
		margin-right: auto;
		float: none;
	}

	// If offset, calculate appropriate margins
	@if $offset { 
		margin-left: #{perc($offset)} !important; 
	}
}


// Create presentational classes for grid
//
// $size - Name of class to use, i.e. "l" will generate .l-1, .l-2, etc.
@mixin grid-html-classes($size) {

	@for $i from 0 through 99 {
		.#{$size}-push-#{$i} {
			@include grid-column($push:$i, $flat:null, $float:false);
		}
		.#{$size}-pull-#{$i} {
			@include grid-column($pull:$i, $flat:null, $float:false);
		}
	}

	// Handle special push classes
	.#{$size}-push-1-3rd {
		@include grid-column($push:1/3*100,$flat:null,$float:false);
	}
	.#{$size}-push-2-3rds {
		@include grid-column($push:2/3*100,$flat:null,$float:false);
	}
	.#{$size}-push-1-6th {
		@include grid-column($push:1/6*100,$flat:null,$float:false);
	}
	.#{$size}-push-5-6ths {
		@include grid-column($push:5/6*100,$flat:null,$float:false);
	}

	// Handle special pull classes
	.#{$size}-pull-1-3rd {
		@include grid-column($pull:1/3*100,$flat:null,$float:false);
	}
	.#{$size}-pull-2-3rds {
		@include grid-column($pull:2/3*100,$flat:null,$float:false);
	}
	.#{$size}-pull-1-6th {
		@include grid-column($pull:1/6*100,$flat:null,$float:false);
	}
	.#{$size}-pull-5-6ths {
		@include grid-column($pull:5/6*100,$flat:null,$float:false);
	}

	.col { 
		@include grid-column($columns:false, $position:true); 
	}


	@for $i from 1 through 100 {
		.#{$size}-#{$i} { 
			@include grid-column($columns:$i,$flat:null,$float:false); 
		}
	}

	// Handle special classes
	.#{$size}-1-3rd {
		@include grid-column($columns:1/3*100,$flat:null,$float:false);
	}
	.#{$size}-2-3rds {
		@include grid-column($columns:2/3*100,$flat:null,$float:false);
	}
	.#{$size}-1-6th {
		@include grid-column($columns:1/6*100,$flat:null,$float:false);
	}
	.#{$size}-5-6ths {
		@include grid-column($columns:5/6*100,$flat:null,$float:false);
	}

	[class*="col"] + [class*="col"]:last-child { float: right; }
	[class*="col"] + [class*="col"].end { float: left; }


	@for $i from 0 through 99 {
		.#{$size}-offset-#{$i} { 
			@include grid-column($offset:$i, $flat:null,$float:false); 
		}
	}

	// Handle special offset classes
	.#{$size}-offset-1-3rd {
		@include grid-column($offset:1/3*100,$flat:null,$float:false);
	}
	.#{$size}-offset-2-3rds {
		@include grid-column($offset:2/3*100,$flat:null,$float:false);
	}
	.#{$size}-offset-1-6th {
		@include grid-column($offset:1/6*100,$flat:null,$float:false);
	}
	.#{$size}-offset-5-6ths {
		@include grid-column($offset:5/6*100,$flat:null,$float:false);
	}

	.#{$size}-reset-order,
	.#{$size}-reset-order {
		margin-left: 0;
		margin-right: 0;
		left: auto;
		right: auto;
		float: left;
	}

	.col.#{$size}-centered { 
		@include grid-column($center:true, $flat:null, $float:false); 
	}

	.col.#{$size}-uncentered {
		margin-left: 0;
		margin-right: 0;
		float: left !important;
	}

	.col.#{$size}-uncentered.opposite {
		float: right;
	}
}

.row {
	width: 100%;
	margin: 0 auto;
	max-width: $row-width;

	&.flat {
		 > .col { 
			@include grid-column($flat:true, $float:false); 
		 }

		.row {
			margin-left:0; 
			margin-right:0;
		}
	}

	.row { 
		margin-left: -($gutter/2);
		margin-right: -($gutter/2);
		width: auto;
		max-width: none;

		&.flat {
			margin-top: 0;
			margin-bottom: 0;
		}
	}
}

.col { 
	@include grid-column($columns:100); 
}

@if $include-xs-grid {
	@media #{$xsmall-up} {
		@include grid-html-classes($size:xs);
	}
}

@if $include-s-grid {
	@media #{$small-up} {
		@include grid-html-classes($size:s);
	}
}

@if $include-m-grid {
	@media #{$medium-up} {
		@include grid-html-classes($size:m);
	}
}

@if $include-l-grid {
	@media #{$large-up} {
		@include grid-html-classes($size:l);
	}
}

@if $include-xl-grid {
	@media #{$xlarge-up} {
		@include grid-html-classes($size:xl);
	}
}

@if $include-xxl-grid {
	@media #{$xxlarge-up} {
		@include grid-html-classes($size:xxl);
	}
}